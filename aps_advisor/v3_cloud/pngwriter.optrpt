Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 2021.1 Beta Build 20200602

Compiler options: -I/home/u44098/include -I/glob/development-tools/versions/oneapi/beta07/inteloneapi/mpi/2021.1-beta07/include -g -Ofast -Wall -Wextra -xcore-AVX512 -qopt-zmm-usage=high -no-prec-div -qopenmp-simd -qopt-report=5 -qopt-report-phase=all -c -o pngwriter.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: save_png(double *, const int, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (save_png(double *, const int, const int, const char *)) [1/1=100.0%] pngwriter.c(99,1)
  -> EXTERN: (115,10) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (121,9) png_create_write_struct(png_const_charp, png_voidp, png_error_ptr, png_error_ptr)
  -> EXTERN: (127,19) png_create_info_struct(png_const_structrp)
  -> EXTERN: (133,9) _setjmp(struct __jmp_buf_tag *)
  -> EXTERN: (133,9) png_set_longjmp_fn(png_structrp, png_longjmp_ptr, size_t)
  -> EXTERN: (137,5) png_set_IHDR(png_const_structrp, png_inforp, png_uint_32, png_uint_32, int, int, int, int, int)
  -> EXTERN: (142,20) png_malloc(png_const_structrp, png_alloc_size_t)
  -> EXTERN: (145,25) png_malloc(png_const_structrp, png_alloc_size_t)
  -> EXTERN: (173,5) png_init_io(png_structrp, png_FILE_p)
  -> EXTERN: (174,5) png_set_rows(png_const_structrp, png_inforp, png_bytepp)
  -> EXTERN: (175,5) png_write_png(png_structrp, png_inforp, int, png_voidp)
  -> EXTERN: (181,9) png_free(png_const_structrp, png_voidp)
  -> EXTERN: (183,5) png_free(png_const_structrp, png_voidp)
  -> EXTERN: (188,5) png_destroy_write_struct(png_structpp, png_infopp)
  -> EXTERN: (190,5) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pngwriter.c(144,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pngwriter.c(151,3)
      remark #15389: vectorization support: reference data[j+i*width] has unaligned access   [ pngwriter.c(157,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <row[j*3]>, stride is 3   [ pngwriter.c(167,4) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <heat_colormap[ival][0]>, part of index is read from memory   [ pngwriter.c(167,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <row[j*3+1]>, stride is 3   [ pngwriter.c(168,4) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <heat_colormap[ival][1]>, part of index is read from memory   [ pngwriter.c(168,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <row[j*3+2]>, stride is 3   [ pngwriter.c(169,4) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <heat_colormap[ival][2]>, part of index is read from memory   [ pngwriter.c(169,17) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.009
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 3 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 20.430 
      remark #15478: estimated potential speedup: 1.320 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at pngwriter.c(151,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference data[j+i*width] has unaligned access   [ pngwriter.c(157,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.048
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 3 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 20.430 
      remark #15478: estimated potential speedup: 1.320 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at pngwriter.c(180,5)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

    Report from: Code generation optimizations [cg]

pngwriter.c(99,1):remark #34051: REGISTER ALLOCATION : [save_png] pngwriter.c:99

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   34[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm14 k0-k5]
        
    Routine temporaries
        Total         :     168
            Global    :      41
            Local     :     127
        Regenerable   :      28
        Spilled       :       1
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :      27 [3.27e+00 ~ 3.3%]
            Writes    :      13 [2.29e+00 ~ 2.3%]
        Spills        :      40 bytes*
            Reads     :       5 [9.35e-01 ~ 0.9%]
            Writes    :       5 [9.35e-01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
