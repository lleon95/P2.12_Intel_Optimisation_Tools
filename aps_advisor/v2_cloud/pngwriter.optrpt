Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 2021.1 Beta Build 20200602

Compiler options: -I/home/u44098/include -I/glob/development-tools/versions/oneapi/beta07/inteloneapi/mpi/2021.1-beta07/include -g -Ofast -Wall -Wextra -xcore-AVX512 -qopt-zmm-usage=high -no-prec-div -qopenmp-simd -qopt-report=5 -qopt-report-phase=all -c -o pngwriter.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: save_png(double *, const int, const int, const char *, const char)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (save_png(double *, const int, const int, const char *, const char)) [1/3=33.3%] pngwriter.c(99,1)
  -> EXTERN: (115,10) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (121,9) png_create_write_struct(png_const_charp, png_voidp, png_error_ptr, png_error_ptr)
  -> EXTERN: (127,19) png_create_info_struct(png_const_structrp)
  -> EXTERN: (133,9) _setjmp(struct __jmp_buf_tag *)
  -> EXTERN: (133,9) png_set_longjmp_fn(png_structrp, png_longjmp_ptr, size_t)
  -> EXTERN: (137,5) png_set_IHDR(png_const_structrp, png_inforp, png_uint_32, png_uint_32, int, int, int, int, int)
  -> EXTERN: (142,20) png_malloc(png_const_structrp, png_alloc_size_t)
  -> EXTERN: (145,25) png_malloc(png_const_structrp, png_alloc_size_t)
  -> CP_CLONE (155,17) cmap..0(double, const double, const double, pixel_t *) (isz = 30) (sz = 41)
     [[ Callee not marked with inlining pragma  <1>]]
  -> CP_CLONE (163,17) cmap..0(double, const double, const double, pixel_t *) (isz = 30) (sz = 41)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (169,13) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (170,13) exit(int)
  -> EXTERN: (174,5) png_init_io(png_structrp, png_FILE_p)
  -> EXTERN: (175,5) png_set_rows(png_const_structrp, png_inforp, png_bytepp)
  -> EXTERN: (176,5) png_write_png(png_structrp, png_inforp, int, png_voidp)
  -> EXTERN: (182,9) png_free(png_const_structrp, png_voidp)
  -> EXTERN: (184,5) png_free(png_const_structrp, png_voidp)
  -> EXTERN: (189,5) png_destroy_write_struct(png_structpp, png_infopp)
  -> EXTERN: (191,5) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pngwriter.c(144,5)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at pngwriter.c(151,13)
      remark #15382: vectorization support: call to function cmap..0(double, const double, const double, pixel_t *) cannot be vectorized   [ pngwriter.c(155,17) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at pngwriter.c(161,13)
      remark #15382: vectorization support: call to function cmap..0(double, const double, const double, pixel_t *) cannot be vectorized   [ pngwriter.c(163,17) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

LOOP BEGIN at pngwriter.c(181,5)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

    Report from: Code generation optimizations [cg]

pngwriter.c(99,1):remark #34051: REGISTER ALLOCATION : [save_png] pngwriter.c:99

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     154
            Global    :      38
            Local     :     116
        Regenerable   :      36
        Spilled       :       5
        
    Routine stack
        Variables     :      59 bytes*
            Reads     :      38 [1.50e+01 ~ 15.0%]
            Writes    :      13 [3.97e+00 ~ 4.0%]
        Spills        :      80 bytes*
            Reads     :      14 [9.01e+00 ~ 9.0%]
            Writes    :      12 [3.71e+00 ~ 3.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cmap..0(double, const double, const double, pixel_t *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cmap..0(double, const double, const double, pixel_t *)) [2/3=66.7%] pngwriter.c(203,1)
  CLONED FROM: cmap(double, const double, const double, pixel_t *)(X,0x66666666,0x40046666,0x00000000,0x00000000,X)


    Report from: Code generation optimizations [cg]

pngwriter.c(203,1):remark #34051: REGISTER ALLOCATION : [cmap..0] pngwriter.c:203

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi zmm0-zmm3]
        
    Routine temporaries
        Total         :      21
            Global    :       8
            Local     :      13
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cmap(double, const double, const double, pixel_t *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cmap(double, const double, const double, pixel_t *)) [3/3=100.0%] pngwriter.c(203,1)


    Report from: Code generation optimizations [cg]

pngwriter.c(203,1):remark #34051: REGISTER ALLOCATION : [cmap] pngwriter.c:203

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi zmm0-zmm2]
        
    Routine temporaries
        Total         :      23
            Global    :       8
            Local     :      15
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics indicate that the function is not profitable to 
    inline.  Override this decision by adding "inline 
    __attribute__((always_inline))" to the declaration of the called function, 
    or add "#pragma forceinline" before the call site.

