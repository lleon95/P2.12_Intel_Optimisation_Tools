Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 2021.1 Beta Build 20200602

Compiler options: -I/home/u44098/include -I/glob/development-tools/versions/oneapi/beta07/inteloneapi/mpi/2021.1-beta07/include -g -Ofast -Wall -Wextra -xcore-AVX512 -qopt-zmm-usage=high -no-prec-div -qopenmp-simd -qopt-report=5 -qopt-report-phase=all -c -o core.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: idx(int, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (idx(int, int, int)) heat.h(42,1)

===========================================================================

Begin optimization report for: exchange_finalize(parallel_data *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (exchange_finalize(parallel_data *)) [2/5=40.0%] core.c(49,1)
  -> EXTERN: (50,5) MPI_Waitall(int, MPI_Request *, MPI_Status *)


    Report from: Code generation optimizations [cg]

core.c(49,1):remark #34051: REGISTER ALLOCATION : [exchange_finalize] core.c:49

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: evolve_interior(field *, field *, double, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (evolve_interior(field *, field *, double, double)) [3/5=60.0%] core.c(55,1)
  -> INLINE (MANUAL): (69,18) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (70,18) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (71,18) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (72,18) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (73,18) idx(int, int, int) (isz = 0) (sz = 9)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at core.c(66,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at core.c(68,9)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15389: vectorization support: reference curr->data[i*width+j] has unaligned access   [ core.c(74,13) ]
      remark #15389: vectorization support: reference prev->data[i*width+j] has unaligned access   [ core.c(74,30) ]
      remark #15389: vectorization support: reference prev->data[(i+1)*width+j] has unaligned access   [ core.c(75,34) ]
      remark #15389: vectorization support: reference prev->data[i*width+j] has unaligned access   [ core.c(76,40) ]
      remark #15389: vectorization support: reference prev->data[(i-1)*width+j] has unaligned access   [ core.c(77,34) ]
      remark #15389: vectorization support: reference prev->data[i*width+j+1] has unaligned access   [ core.c(78,34) ]
      remark #15389: vectorization support: reference prev->data[i*width+j] has unaligned access   [ core.c(79,40) ]
      remark #15389: vectorization support: reference prev->data[i*width+j-1] has unaligned access   [ core.c(80,34) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.553
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 5 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 87 
      remark #15477: vector cost: 4.750 
      remark #15478: estimated potential speedup: 17.360 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at core.c(68,9)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at core.c(68,9)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference curr->data[i*width+j] has unaligned access   [ core.c(74,13) ]
      remark #15389: vectorization support: reference prev->data[i*width+j] has unaligned access   [ core.c(74,30) ]
      remark #15389: vectorization support: reference prev->data[(i+1)*width+j] has unaligned access   [ core.c(75,34) ]
      remark #15389: vectorization support: reference prev->data[i*width+j] has unaligned access   [ core.c(76,40) ]
      remark #15389: vectorization support: reference prev->data[(i-1)*width+j] has unaligned access   [ core.c(77,34) ]
      remark #15389: vectorization support: reference prev->data[i*width+j+1] has unaligned access   [ core.c(78,34) ]
      remark #15389: vectorization support: reference prev->data[i*width+j] has unaligned access   [ core.c(79,40) ]
      remark #15389: vectorization support: reference prev->data[i*width+j-1] has unaligned access   [ core.c(80,34) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.576
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

core.c(74,30):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
core.c(74,30):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
core.c(55,1):remark #34051: REGISTER ALLOCATION : [evolve_interior] core.c:55

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   33[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm17 k1]
        
    Routine temporaries
        Total         :     124
            Global    :      54
            Local     :      70
        Regenerable   :       5
        Spilled       :      23
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     168 bytes*
            Reads     :      24 [4.51e+00 ~ 4.5%]
            Writes    :      21 [2.55e+00 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: evolve_edges(field *, field *, double, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (evolve_edges(field *, field *, double, double)) [4/5=80.0%] core.c(88,1)
  -> INLINE (MANUAL): (102,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (103,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (104,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (105,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (106,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (118,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (119,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (120,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (121,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (122,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (132,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (133,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (134,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (135,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (136,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (147,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (148,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (149,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (150,14) idx(int, int, int) (isz = 0) (sz = 9)
  -> INLINE (MANUAL): (151,14) idx(int, int, int) (isz = 0) (sz = 9)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at core.c(101,2)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15389: vectorization support: reference curr->data[ic] has unaligned access   [ core.c(107,9) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(107,26) ]
   remark #15389: vectorization support: reference prev->data[2*width+j] has unaligned access   [ core.c(108,30) ]
   remark #15389: vectorization support: reference prev->data[j] has unaligned access   [ core.c(110,30) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(109,36) ]
   remark #15389: vectorization support: reference prev->data[width+j+1] has unaligned access   [ core.c(111,30) ]
   remark #15389: vectorization support: reference prev->data[width+j-1] has unaligned access   [ core.c(113,30) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(112,36) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.553
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 87 
   remark #15477: vector cost: 4.750 
   remark #15478: estimated potential speedup: 17.360 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at core.c(101,2)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference curr->data[ic] has unaligned access   [ core.c(107,9) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(107,26) ]
   remark #15389: vectorization support: reference prev->data[2*width+j] has unaligned access   [ core.c(108,30) ]
   remark #15389: vectorization support: reference prev->data[j] has unaligned access   [ core.c(110,30) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(109,36) ]
   remark #15389: vectorization support: reference prev->data[width+j+1] has unaligned access   [ core.c(111,30) ]
   remark #15389: vectorization support: reference prev->data[width+j-1] has unaligned access   [ core.c(113,30) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(112,36) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.576
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at core.c(101,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at core.c(117,5)
   remark #15389: vectorization support: reference curr->data[ic] has unaligned access   [ core.c(123,9) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(123,26) ]
   remark #15389: vectorization support: reference prev->data[(i+1)*width+j] has unaligned access   [ core.c(124,30) ]
   remark #15389: vectorization support: reference prev->data[(i-1)*width+j] has unaligned access   [ core.c(126,30) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(125,36) ]
   remark #15389: vectorization support: reference prev->data[i*width+j+1] has unaligned access   [ core.c(127,30) ]
   remark #15389: vectorization support: reference prev->data[i*width+j-1] has unaligned access   [ core.c(129,30) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(128,36) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.553
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 87 
   remark #15477: vector cost: 4.750 
   remark #15478: estimated potential speedup: 17.360 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at core.c(117,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference curr->data[ic] has unaligned access   [ core.c(123,9) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(123,26) ]
   remark #15389: vectorization support: reference prev->data[(i+1)*width+j] has unaligned access   [ core.c(124,30) ]
   remark #15389: vectorization support: reference prev->data[(i-1)*width+j] has unaligned access   [ core.c(126,30) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(125,36) ]
   remark #15389: vectorization support: reference prev->data[i*width+j+1] has unaligned access   [ core.c(127,30) ]
   remark #15389: vectorization support: reference prev->data[i*width+j-1] has unaligned access   [ core.c(129,30) ]
   remark #15389: vectorization support: reference prev->data[ic] has unaligned access   [ core.c(128,36) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.576
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 87 
   remark #15477: vector cost: 4.750 
   remark #15478: estimated potential speedup: 17.360 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at core.c(131,5)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15416: vectorization support: non-unit strided store was generated for the variable <curr->data[ic]>, stride is unknown to compiler   [ core.c(137,9) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[ic]>, stride is unknown to compiler   [ core.c(137,26) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[(i+1)*width+1]>, stride is unknown to compiler   [ core.c(138,30) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[ic]>, stride is unknown to compiler   [ core.c(139,36) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[(i-1)*width+1]>, stride is unknown to compiler   [ core.c(140,30) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[i*width+2]>, stride is unknown to compiler   [ core.c(141,30) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[ic]>, stride is unknown to compiler   [ core.c(142,36) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[i*width]>, stride is unknown to compiler   [ core.c(143,30) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.022
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 7 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 87 
   remark #15477: vector cost: 16.750 
   remark #15478: estimated potential speedup: 4.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at core.c(131,5)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.089
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at core.c(131,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at core.c(146,5)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15416: vectorization support: non-unit strided store was generated for the variable <curr->data[ic]>, stride is unknown to compiler   [ core.c(152,9) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[ic]>, stride is unknown to compiler   [ core.c(152,26) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[(i+1)*width+width]>, stride is unknown to compiler   [ core.c(153,30) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[ic]>, stride is unknown to compiler   [ core.c(154,36) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[(i-1)*width+width]>, stride is unknown to compiler   [ core.c(155,30) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[i*width+width+1]>, stride is unknown to compiler   [ core.c(156,30) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[ic]>, stride is unknown to compiler   [ core.c(157,36) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <prev->data[i*width+width-1]>, stride is unknown to compiler   [ core.c(158,30) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.022
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 7 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 87 
   remark #15477: vector cost: 16.750 
   remark #15478: estimated potential speedup: 4.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at core.c(146,5)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.089
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at core.c(146,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

    Report from: Code generation optimizations [cg]

core.c(107,26):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
core.c(107,26):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
core.c(123,26):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
core.c(123,26):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
core.c(88,1):remark #34051: REGISTER ALLOCATION : [evolve_edges] core.c:88

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   45[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm24 k1-k6]
        
    Routine temporaries
        Total         :     547
            Global    :     137
            Local     :     410
        Regenerable   :      42
        Spilled       :      13
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :      25 [3.00e-01 ~ 0.3%]
            Writes    :      12 [8.55e-02 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: exchange_init(field *, parallel_data *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (exchange_init(field *, parallel_data *)) [5/5=100.0%] core.c(13,1)
  -> INLINE (MANUAL): (17,11) idx(int, int, int) (isz = 0) (sz = 9)
  -> EXTERN: (18,5) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> INLINE (MANUAL): (20,11) idx(int, int, int) (isz = 0) (sz = 9)
  -> EXTERN: (21,5) MPI_Irecv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> INLINE (MANUAL): (24,11) idx(int, int, int) (isz = 0) (sz = 9)
  -> EXTERN: (25,5) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> INLINE (MANUAL): (27,11) idx(int, int, int) (isz = 0) (sz = 9)
  -> EXTERN: (28,5) MPI_Irecv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> INLINE (MANUAL): (31,11) idx(int, int, int) (isz = 0) (sz = 9)
  -> EXTERN: (32,5) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> INLINE (MANUAL): (34,11) idx(int, int, int) (isz = 0) (sz = 9)
  -> EXTERN: (35,5) MPI_Irecv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> INLINE (MANUAL): (38,11) idx(int, int, int) (isz = 0) (sz = 9)
  -> EXTERN: (39,5) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> EXTERN: (42,5) MPI_Irecv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)


    Report from: Code generation optimizations [cg]

core.c(13,1):remark #34051: REGISTER ALLOCATION : [exchange_init] core.c:13

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r11 r13-r15]
        
    Routine temporaries
        Total         :     116
            Global    :       9
            Local     :     107
        Regenerable   :      16
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
